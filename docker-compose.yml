version: '3'

services:
  ##### Config Services - Start #####
  ### For YBDB - Start ###
  # rtdl-db:
  #   platform: linux/amd64
  #   image: yugabytedb/yugabyte:latest
  #   container_name: rtdl_rtdl-db
  #   volumes:
  #     - ./storage/rtdl-db_data:/home/yugabyte/yb_data
  #   command: ["bin/yugabyted", "start", "--base_dir=/home/yugabyte/yb_data", "--daemon=false"]
  #   expose:
  #     - 5433
  #   # ports:
  #   #   - 5433:5432
  #   healthcheck:
  #       test: ["CMD", "yb-ts-cli", "--server_address=localhost", "is_server_ready"]
  #       interval: 10s
  #       timeout: 5s
  #       retries: 12

  # config:
  #   # build:
  #   #   context: ./config
  #   platform: linux/amd64
  #   image: rtdl/rtdl-config:latest
  #   container_name: rtdl_config
  #   expose:
  #     - 80
  #   ports:
  #     - 80:80
  #   environment:
  #     RTDL_DB_PORT: 5433
  # depends_on:
  #   rtdl-db:
  #     condition: service_healthy
  ### For YBDB - End ###

  ### For Postgres - Start ###
  rtdl-db:
    platform: linux/amd64
    image: postgres:latest
    container_name: rtdl_rtdl-db
    volumes:
      - ./storage/rtdl-db_data:/var/lib/postgresql/data
    expose:
      - 5432
    # ports:
    #   - 5433:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 10s
        timeout: 5s
        retries: 12
  ### For Postgres - End ###

  config:
    build:
      context: ./config
    platform: linux/amd64
    image: rtdl/rtdl-config:latest
    container_name: rtdl_config
    expose:
      - 80
    ports:
      - 80:80
    environment:
      RTDL_DB_HOST: rtdl-db
      RTDL_DB_PORT: 5432
      RTDL_DB_USER: rtdl
      RTDL_DB_PASSWORD: rtdl
      RTDL_DB_DBNAME: rtdl_db
    volumes:
      - ./storage/configs:/app/configs
    depends_on:
      rtdl-db:
        condition: service_healthy
  ##### Config Services - End #####


  ##### Ingest Service - Start #####
  ingest:
    # build:
    #   context: ./ingest
    platform: linux/amd64
    image: rtdl/rtdl-ingest:latest
    container_name: rtdl_ingest
    expose:
      - 8080
    ports:
      - 8080:8080
    environment:
      KAFKA_URL: redpanda:29092
      KAFKA_TOPIC: ingress
      LISTENER_PORT: 8080
    depends_on:      
      - redpanda
  ##### Ingest Service - End #####

  ##### Kafka/Redpanda Services - Start #####
  redpanda:
    command:
    - redpanda
    - start
    - --smp
    - '1'
    - --reserve-memory
    - 0M
    - --overprovisioned
    - --node-id
    - '0'
    - --kafka-addr
    - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
    - --advertise-kafka-addr
    - PLAINTEXT://redpanda:29092,OUTSIDE://0.0.0.0:9092
    # NOTE: Please use the latest version here!
    image: docker.vectorized.io/vectorized/redpanda:v21.9.5
    container_name: rtdl_redpanda
    volumes:
      - ./storage/redpanda/data:/var/lib/redpanda/data
    expose:
      - 9092
      - 9644
      - 29092
    ports:
    - 9092:9092
    - 29092:29092
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:9644/v1/status/ready"]
      start_period: 30s
      interval: 5s
      timeout: 2s
      retries: 24
  ##### Kafka/Redpanda Services - End #####


  ##### Processing Services - Start #####
  statefun-manager:
    platform: linux/amd64
    image: apache/flink-statefun:latest
    container_name: rtdl_process-statefun-manager
    expose:
      - 6123
      - 8081
    #ports:
    #  - 8081:8081
    environment:
      ROLE: master
      MASTER_HOST: statefun-manager
    volumes:
      - ./storage/rtdl-statefun-manager_store:/checkpoint-dir
      - ./ingester/module.yaml:/opt/statefun/modules/ingester/module.yaml
    #  - ./deltawriter/module.yaml:/opt/statefun/modules/deltawriter/module.yaml
    depends_on:
      - ingest

  statefun-worker:
    platform: linux/amd64
    image: apache/flink-statefun:latest
    container_name: rtdl_process-statefun-worker
    expose:
      - 6121
      - 6122
    environment:
      ROLE: worker
      MASTER_HOST: statefun-manager
    volumes:
      - ./storage/rtdl-statefun-worker_store:/checkpoint-dir
      - ./ingester/module.yaml:/opt/statefun/modules/ingester/module.yaml
    #  - ./deltawriter/module.yaml:/opt/statefun/modules/deltawriter/module.yaml
    depends_on:
      - statefun-manager
      - redpanda

  statefun-functions:
    build:
      context: ./ingester
    platform: linux/amd64
    image: rtdl/process-statefun-functions:latest
    container_name: rtdl_process-statefun-functions
    expose:
      - 8082
    environment:
      RTDL_DB_HOST: rtdl-db
      RTDL_DB_PORT: 5432
      RTDL_DB_USER: rtdl
      RTDL_DB_PASSWORD: rtdl
      RTDL_DB_DBNAME: rtdl_db
      DREMIO_HOST: dremio
      DREMIO_PORT: 9047
      DREMIO_USERNAME: rtdl
      DREMIO_PASSWORD: rtdl1234      
      DREMIO_MOUNT_PATH: /mnt/datastore
      GLUE_ENABLED: "false"
      GLUE_ROLE: arn:aws:iam::<account number>:role/<glue role>
      GLUE_SCHEDULE_CRON: 0 0 * * ? *
      SNOWFLAKE_ENABLED: "false"
      SNOWFLAKE_ACCT: <account identifier>
      SNOWFLAKE_USER: <username>
      SNOWFLAKE_PASSWORD: <password>
      SNOWFLAKE_DB: <database>
    volumes:
      - ./storage/rtdl-data_store:/app/datastore    
      - ./storage/configs:/app/configs
    depends_on:     
      rtdl-db:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      dremio:
        condition: service_healthy
  ##### Processing Services - End #####


  ##### Dremio Services - Start #####
  dremio:
    platform: linux/amd64
    image: dremio/dremio-oss
    container_name: rtdl_dremio
    volumes:
      - ./storage/dremio/data:/opt/dremio/data
      - ./storage/rtdl-data_store:/mnt/datastore    
    expose:
      - 9047
      - 31010
      - 45678
    ports:
      - 9047:9047
      - 31010:31010
      - 45678:45678
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9047/apiv2/server_status"]
        interval: 10s
        timeout: 5s
        retries: 24
  ##### Dremio Services - End #####


  ##### Hadoop Services - Start #####
  # namenode:
  #   image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
  #   container_name: namenode
  #   restart: always
  #   ports:
  #     - 9870:9870
  #     - 9000:9000
  #   volumes:
  #     - ./storage/hadoop/dfs/name:/hadoop/dfs/name
  #   environment:
  #     - CLUSTER_NAME=test
  #   env_file:
  #     - ./hadoop/hadoop.env

  # datanode:
  #   image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
  #   container_name: datanode
  #   restart: always
  #   volumes:
  #     - ./storage/hadoop/dfs/data:/hadoop/dfs/data
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:9870"
  #   env_file:
  #     - ./hadoop/hadoop.env
  
  # resourcemanager:
  #   image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
  #   container_name: resourcemanager
  #   restart: always
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
  #   env_file:
  #     - ./hadoop/hadoop.env

  # nodemanager1:
  #   image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
  #   container_name: nodemanager
  #   restart: always
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
  #   env_file:
  #     - ./hadoop/hadoop.env
  
  # historyserver:
  #   image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
  #   container_name: historyserver
  #   restart: always
  #   environment:
  #     SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
  #   volumes:
  #     - ./storage/hadoop/yarn/timeline:/hadoop/yarn/timeline
  #   env_file:
  #     - ./hadoop/hadoop.env
##### Hadoop Services - End ##### 

##### Spark Services - Start #####
# spark:
#    image: docker.io/bitnami/spark:3
#    user: root
#    environment:
#      - SPARK_MODE=master
#      - SPARK_RPC_AUTHENTICATION_ENABLED=no
#      - SPARK_RPC_ENCRYPTION_ENABLED=no
#      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#      - SPARK_SSL_ENABLED=no
#    ports:
#      - '9090:8080'
#      - '7077:7077'
#    volumes:
#      - ./storage/spark:/app
#  spark-worker:
#    user: root
#    image: docker.io/bitnami/spark:3
#    environment:
#      - SPARK_MODE=worker
#      - SPARK_MASTER_URL=spark://spark:7077
#      - SPARK_WORKER_MEMORY=8G
#      - SPARK_WORKER_CORES=8
#      - SPARK_RPC_AUTHENTICATION_ENABLED=no
#      - SPARK_RPC_ENCRYPTION_ENABLED=no
#      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#      - SPARK_SSL_ENABLED=no
#    volumes:
#      - ./storage/spark:/app
##### Spark Services - End #####

